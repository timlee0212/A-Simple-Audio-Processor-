/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "StereoChorusPluginProcessor.h"
#include "StereoChorusPluginEditor.h"


//==============================================================================
StereoChorusAudioProcessorEditor::StereoChorusAudioProcessorEditor (StereoChorusAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    addAndMakeVisible(delaySlider);
    delaySlider.setLookAndFeel(&lookAndFeel);
    delaySlider.setSliderStyle(Slider::RotaryVerticalDrag);
    delaySlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    delaySlider.setBounds(46, 125, 94, 94);
    delaySlider.setRange(0, 1, .01);
    delaySlider.addListener(this);
    
    addAndMakeVisible(feedbackSlider);
    feedbackSlider.setLookAndFeel(&lookAndFeel);
    feedbackSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    feedbackSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    feedbackSlider.setBounds(180, 125, 94, 94);
    feedbackSlider.setRange(0, 1, .01);
    feedbackSlider.addListener(this);
    
    addAndMakeVisible(modSlider);
    modSlider.setLookAndFeel(&lookAndFeel);
    modSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    modSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    modSlider.setBounds(314, 125, 94, 94);
    modSlider.setRange(0, 1, .01);
    modSlider.addListener(this);
    
    addAndMakeVisible(mixSlider);
    mixSlider.setLookAndFeel(&lookAndFeel);
    mixSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    mixSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    mixSlider.setBounds(448, 125, 94, 94);
    mixSlider.setRange(0, 1, .01);
    mixSlider.addListener(this);
    
    startTimer(50);
    
    setSize (590, 300);
}

StereoChorusAudioProcessorEditor::~StereoChorusAudioProcessorEditor()
{
}

void StereoChorusAudioProcessorEditor::timerCallback()
{
    delaySlider.setValue(getProcessor()->getParameter(StereoChorusAudioProcessor::delayParam), dontSendNotification);
    feedbackSlider.setValue(getProcessor()->getParameter(StereoChorusAudioProcessor::feedbackParam), dontSendNotification);
    modSlider.setValue(getProcessor()->getParameter(StereoChorusAudioProcessor::modParam), dontSendNotification);
    mixSlider.setValue(getProcessor()->getParameter(StereoChorusAudioProcessor::mixParam), dontSendNotification);
    
}

void StereoChorusAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    if (slider == &delaySlider) {
        getProcessor()->setParameterNotifyingHost(StereoChorusAudioProcessor::delayParam, slider->getValue());
    }
    if (slider == &feedbackSlider) {
        getProcessor()->setParameterNotifyingHost(StereoChorusAudioProcessor::feedbackParam, slider->getValue());
    }
    if (slider == &modSlider) {
        getProcessor()->setParameterNotifyingHost(StereoChorusAudioProcessor::modParam, slider->getValue());
    }
    if (slider == &mixSlider) {
        getProcessor()->setParameterNotifyingHost(StereoChorusAudioProcessor::mixParam, slider->getValue());
    }
}

//==============================================================================
void StereoChorusAudioProcessorEditor::paint (Graphics& g)
{
    Image bg = ImageCache::getFromMemory(BinaryData::background_png, BinaryData::background_pngSize);
    g.drawImage(bg, 0, 0, 590, 300, 0, 0, 590, 300);

}
